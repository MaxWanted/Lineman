# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'armobhod.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import os
import os.path
from dbase import connect, insert, select

from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox

'''
#класс-интерфейс окна программы созданный с помощью qtdisigner
class Ui_main_window(object):
    def setupUi(self, main_window):
        main_window.setObjectName("main_window")
        main_window.resize(786, 517)
        self.centralwidget = QtWidgets.QWidget(main_window)
        self.centralwidget.setObjectName("centralwidget")
        self.lbl_date = QtWidgets.QLabel(self.centralwidget)
        self.lbl_date.setGeometry(QtCore.QRect(10, 20, 100, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_date.setFont(font)
        self.lbl_date.setObjectName("lbl_date")
        self.lbl_time = QtWidgets.QLabel(self.centralwidget)
        self.lbl_time.setGeometry(QtCore.QRect(130, 20, 100, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_time.setFont(font)
        self.lbl_time.setObjectName("lbl_time")
        self.lbl_shift = QtWidgets.QLabel(self.centralwidget)
        self.lbl_shift.setGeometry(QtCore.QRect(250, 20, 131, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_shift.setFont(font)
        self.lbl_shift.setObjectName("lbl_shift")
        self.lbl_info = QtWidgets.QLabel(self.centralwidget)
        self.lbl_info.setGeometry(QtCore.QRect(430, 20, 341, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_info.setFont(font)
        self.lbl_info.setObjectName("lbl_info")
# комбобокс Опертор проверяющий
        self.cbox_operator = QtWidgets.QComboBox(self.centralwidget)
        self.cbox_operator.setGeometry(QtCore.QRect(10, 100, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.cbox_operator.setFont(font)
        self.cbox_operator.setObjectName("cbox_operator")
        self.cbox_operator.addItem("")
        self.cbox_operator.addItem("")
        self.cbox_operator.addItem("")
        self.cbox_object = QtWidgets.QComboBox(self.centralwidget)
        self.cbox_object.setGeometry(QtCore.QRect(250, 100, 291, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
#комбобокс Объект проверки
        self.cbox_object.setFont(font)
        self.cbox_object.setObjectName("cbox_object")
        self.cbox_object.addItem("")
        self.cbox_object.addItem("")
        self.cbox_object.addItem("")

        self.tbox_parameteres = QtWidgets.QTextBrowser(self.centralwidget)
        self.tbox_parameteres.setGeometry(QtCore.QRect(10, 150, 531, 192))
        self.tbox_parameteres.setObjectName("tbox_parameteres")
        self.radiobtn_no = QtWidgets.QRadioButton(self.centralwidget)
        self.radiobtn_no.setGeometry(QtCore.QRect(50, 360, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)

        self.radiobtn_no.setFont(font)
        self.radiobtn_no.setObjectName("radiobtn_no")
        self.radiobtn_yes = QtWidgets.QRadioButton(self.centralwidget)
        self.radiobtn_yes.setGeometry(QtCore.QRect(290, 360, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.radiobtn_yes.setFont(font)
        self.radiobtn_yes.setObjectName("radiobtn_yes")
        self.btn_confirm = QtWidgets.QPushButton(self.centralwidget)
        self.btn_confirm.setGeometry(QtCore.QRect(550, 100, 221, 41))
        self.btn_confirm.setObjectName("btn_confirm")
        self.btn_saveresult = QtWidgets.QPushButton(self.centralwidget)
        self.btn_saveresult.setGeometry(QtCore.QRect(10, 430, 531, 51))
        self.btn_saveresult.setObjectName("btn_saveresult")
        self.btn_unloadresult = QtWidgets.QPushButton(self.centralwidget)
        self.btn_unloadresult.setGeometry(QtCore.QRect(550, 370, 221, 51))
        self.btn_unloadresult.setObjectName("btn_unloadresult")
        self.btn_exit = QtWidgets.QPushButton(self.centralwidget)
        self.btn_exit.setGeometry(QtCore.QRect(550, 430, 221, 51))
        self.btn_exit.setObjectName("btn_exit")
        self.btn_next = QtWidgets.QPushButton(self.centralwidget)
        self.btn_next.setGeometry(QtCore.QRect(550, 260, 221, 61))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_next.setFont(font)
        self.btn_next.setObjectName("btn_next")
        self.btn_previous = QtWidgets.QPushButton(self.centralwidget)
        self.btn_previous.setGeometry(QtCore.QRect(550, 170, 221, 61))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_previous.setFont(font)
        self.btn_previous.setObjectName("btn_previous")
        main_window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(main_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 786, 21))
        self.menubar.setObjectName("menubar")
        main_window.setMenuBar(self.menubar)

        self.retranslateUi(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def retranslateUi(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("main_window", "MainWindow"))
        self.lbl_date.setText(_translate("main_window", "Дата"))
        self.lbl_time.setText(_translate("main_window", "Время"))
        self.lbl_shift.setText(_translate("main_window", "Дневная смена"))
        self.lbl_info.setText(_translate("main_window", "Информация"))
        self.cbox_operator.setItemText(0, _translate("main_window", "Иванов"))
        self.cbox_operator.setItemText(1, _translate("main_window", "Петров"))
        self.cbox_operator.setItemText(2, _translate("main_window", "Сидоров"))
        self.cbox_object.setItemText(0, _translate("main_window", "Трансформатор 1"))
        self.cbox_object.setItemText(1, _translate("main_window", "Трансформатор 2"))
        self.cbox_object.setItemText(2, _translate("main_window", "Трансформатор 3"))
        self.radiobtn_no.setText(_translate("main_window", "НЕТ"))
        self.radiobtn_yes.setText(_translate("main_window", "ДА"))
        self.btn_confirm.setText(_translate("main_window", "Подтвердить выбор"))
        self.btn_saveresult.setText(_translate("main_window", "Сохранить результат"))
        self.btn_unloadresult.setText(_translate("main_window", "Выгрузить отчет"))
        self.btn_exit.setText(_translate("main_window", "Выход"))
        self.btn_next.setText(_translate("main_window", "Следующий"))
        self.btn_previous.setText(_translate("main_window", "Предыдущий"))
'''


class MainWindow(QMainWindow):
    list_of_params = []

    def __init__(self):
        super().__init__()  # super(MainWindow, self)
        self.initUI()




    # функция описывает и создает все элементы на форме
    def initUI(self):
        self.setGeometry(200, 200, 1150, 768)
        self.setWindowTitle("Арм Обходчик")




        # определяем стиль шрифта для надписей и кнопок
        font_lbl = QtGui.QFont()
        font_lbl.setPointSize(12)
        font_lbl.setBold(True)
        font_lbl.setWeight(75)

        # определяем шрифт для всех комбобоксов
        font_cbox = QtGui.QFont()
        font_cbox.setPointSize(16)
        font_cbox.setBold(True)
        font_cbox.setWeight(75)

        # надпись дата
        self.lbl_date = QtWidgets.QLabel(self)
        self.lbl_date.setText("Дата")
        # self.lbl_date.move(10, 30)
        self.lbl_date.setGeometry(10, 100, 100, 30)
        self.lbl_date.setFont(font_lbl)

        # надпись время
        self.lbl_time = QtWidgets.QLabel(self)
        self.lbl_time.setText("Время")
        # self.lbl_time.move(110, 30)
        self.lbl_time.setGeometry(110, 100, 100, 30)
        self.lbl_time.setFont(font_lbl)

        # надпись смена
        self.lbl_shift = QtWidgets.QLabel(self)
        self.lbl_shift.setText("Дневная смена")
        # self.lbl_shift.move(210, 30)
        self.lbl_shift.setGeometry(210, 100, 200, 30)
        self.lbl_shift.setFont(font_lbl)

        # надпись информация
        self.lbl_info = QtWidgets.QLabel(self)
        self.lbl_info.setText("Информация")
        # self.lbl_info.move(510, 30)
        self.lbl_info.setGeometry(450, 100, 510, 30)
        self.lbl_info.setFont(font_lbl)

        # надпись параметр проверки
        self.lbl_parameter = QtWidgets.QLabel(self)
        self.lbl_parameter.setText("fvfvfvfv")
        self.lbl_parameter.setGeometry(10, 300, 500, 300)
        self.lbl_parameter.setFont(font_lbl)

        # список выбора оператора
        self.cbox_operator = QtWidgets.QComboBox(self)
        self.cbox_operator.setGeometry(QtCore.QRect(10, 150, 400, 50))
        self.cbox_operator.setFont(font_cbox)

        # список выбора объекта проверки
        self.cbox_object = QtWidgets.QComboBox(self)
        self.cbox_object.setGeometry(QtCore.QRect(450, 150, 400, 50))
        self.cbox_object.setFont(font_cbox)

        # кнопка загрузки списка операторов из текстового файла
        self.btn_addoperators = QtWidgets.QPushButton(self)
        self.btn_addoperators.setText("Загрузить список операторов")
        self.btn_addoperators.setGeometry(10, 5, 200, 40)
        self.btn_addoperators.clicked.connect(self.click_add_operators)

        # кнопка загрузки списка объектов проверки из текстового файла
        self.btn_addobjects = QtWidgets.QPushButton(self)
        self.btn_addobjects.setText("Загрузить список объектов")
        self.btn_addobjects.setGeometry(230, 5, 200, 40)
        self.btn_addobjects.clicked.connect(self.click_add_objects)

        # кнопка пролистывания списка вперед
        self.btn_next = QtWidgets.QPushButton(self)
        self.btn_next.setText("Следующий")
        self.btn_next.setGeometry(900, 300, 200, 50)
        self.btn_next.setFont(font_lbl)
        self.btn_next.clicked.connect(self.do_next)

        # кнопка пролистывания списка назад
        self.btn_prev = QtWidgets.QPushButton(self)
        self.btn_prev.setText("Предыдущий")
        self.btn_prev.setGeometry(900, 375, 200, 50)
        self.btn_prev.setFont(font_lbl)
        self.btn_prev.clicked.connect(self.do_next)

        # кнопка подтвержедния выбора оператора и объекта проверки
        self.btn_confirm = QtWidgets.QPushButton(self)
        self.btn_confirm.setText("Подтвердить выбор")
        self.btn_confirm.setGeometry(900, 150, 200, 50)
        self.btn_confirm.setFont(font_lbl)
        # используем lambda фукнцию т.к. она необходима для передач параметров
        self.btn_confirm.clicked.connect(self.f2)

        self.msg = QMessageBox()
        self.msg.setWindowTitle("Название окна")
        self.msg.setText("Описание")
        self.msg.setIcon(QMessageBox.Warning)

        self.show()

    # функция загрузки списка операторов из файла и добавление в комбобокс операторов
    def click_add_operators(self):
        with open('data\список операторов.txt', "r") as file:
            lines = file.read().split("\n")
        self.cbox_operator.clear()
        self.cbox_operator.addItems(lines)
        file.close()
        # print(lines)

    # функция загрузки списка объектов из файла и добавление в комбобокс объектов
    def click_add_objects(self):
        with open('data\список объектов.txt', 'r') as file:
            lines = file.read().split("\n")
        self.cbox_object.clear()
        self.cbox_object.addItems(lines)
        file.close()
        # print(lines)

    # следующий параметр в лейбле
    def do_next(self):
        global list_of_params
        self.lbl_parameter.setText(list_of_params[5])


class Objects:
    current_param = 0

    def __init__(self):
        super(Objects, self).__init__()



    # ищем текстовый файл с именеем объекта соотвветствующий выбранному в комбобоксе объекту проверки
    def read_objects(self):



        folder = 'objects'  # присваиваем  директорию на ту где лежат файлы объектов
        for root, dirs, files in os.walk(folder):  # нас интересуют только файлы
            for filename in files:
                # при сравнеии удаляем расширение и оставляем только имя файла
                if (os.path.splitext(os.path.basename(filename))[0]) == self.win.lbl_parameter.setText():
                    filename = 'objects' + '\\' + filename  # присваиваем к имени файла ищи и путь
                    # откерываем файл и читаем по строкам, добавляем в список и работаем дальше
                    with open(filename, 'r') as file:
                        lines = file.read().split("\n")
                        list_params = []
                        for line in lines:
                            list_params.append(line)
                        # удаляем пустые элементы в списке, если они есть
                        list_params[:] = [item for item in list_params if item != '']
                        # self.lbl_parameter.setText(list_params[1])  # временно выводим 1ю надпись для теста в лейбл
                        file.close()
                        global list_of_params
                        list_of_params = list_params[:]  # копируем старый списк в глобальный
                        print(list_of_params)

    def read_param(self):
        pass

    def load_param(self):
        pass

    def save_param(self):
        pass

    def display_param(self):
        print('Текущий параметр' + self.name)

    def next_param(self):
        Objects.current_param += 1

    def prev_param(self):
        Objects.current_param -= 1


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MainWindow()
    sys.exit(app.exec_())
